{
  "address": "0x6ee0721adAeD44D78c67A44158F3C977cfa6Ddc1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenBAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBInput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityRemover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBOutput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAInput",
          "type": "uint256"
        }
      ],
      "name": "TokenAToTokenBSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAOutput",
          "type": "uint256"
        }
      ],
      "name": "TokenBToTokenASwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xInput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xReserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yReserves",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAInput",
          "type": "uint256"
        }
      ],
      "name": "tokenAToTokenB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenBInput",
          "type": "uint256"
        }
      ],
      "name": "tokenBToTokenA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12622ba3cb7ff501f492fde65682658c4df16039c12939593f3b78c87b18b8ac",
  "receipt": {
    "to": null,
    "from": "0x22348c7Db11A27D5cCD8120C3694C814F592251d",
    "contractAddress": "0x6ee0721adAeD44D78c67A44158F3C977cfa6Ddc1",
    "transactionIndex": 135,
    "gasUsed": "1357062",
    "logsBloom": "0x
    "blockHash": "0xae30b74ec937216180dc4f9a58ea6948e025a68c45ba0c3b37f1dffd4068552d",
    "transactionHash": "0x12622ba3cb7ff501f492fde65682658c4df16039c12939593f3b78c87b18b8ac",
    "logs": [],
    "blockNumber": 8114888,
    "cumulativeGasUsed": "18020355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3C3beAe195c69BfF75c35134eDdA7DB89Ef1B460",
    "0xAEa150dB08956A51fE583CC5331274a7dF022f02"
  ],
  "numDeployments": 1,
  "solcInputHash": "83643b8dc9970ebe8d37cb7d9c9aa2d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBInput\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityRemover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBOutput\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAInput\",\"type\":\"uint256\"}],\"name\":\"TokenAToTokenBSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAOutput\",\"type\":\"uint256\"}],\"name\":\"TokenBToTokenASwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yReserves\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAInput\",\"type\":\"uint256\"}],\"name\":\"tokenAToTokenB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBInput\",\"type\":\"uint256\"}],\"name\":\"tokenBToTokenA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenPairPool.sol\":\"TokenPairPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/TokenPairPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract TokenPairPool {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 public tokenA;\\n    IERC20 public tokenB;\\n    string public tokenAName;\\n    string public tokenBName;\\n    address public tokenAAddress;\\n    address public tokenBAddress;\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event TokenAToTokenBSwap(address swapper, uint256 tokenBOutput, uint256 tokenAInput);\\n    event TokenBToTokenASwap(address swapper, uint256 tokenBInput, uint256 tokenAOutput);\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 tokenAInput, uint256 tokenBInput);\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokenAOutput,\\n        uint256 tokenBOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAAddr, address tokenBAddr) {\\n        tokenA = IERC20(tokenAAddr);\\n        tokenB = IERC20(tokenBAddr);\\n        tokenAAddress = tokenAAddr;\\n        tokenBAddress = tokenBAddr;\\n        \\n        // Try to get the token names if available\\n        // This is optional and may fail if the token contracts don't implement name()\\n        try IERC20Metadata(tokenAAddr).name() returns (string memory name) {\\n            tokenAName = name;\\n        } catch {\\n            tokenAName = \\\"Unknown\\\";\\n        }\\n        \\n        try IERC20Metadata(tokenBAddr).name() returns (string memory name) {\\n            tokenBName = name;\\n        } catch {\\n            tokenBName = \\\"Unknown\\\";\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function init(uint256 tokenAAmount, uint256 tokenBAmount) public returns (uint256) {\\n        require(totalLiquidity == 0, \\\"SwapPool: already initialized\\\");\\n        require(tokenAAmount > 0 && tokenBAmount > 0, \\\"SwapPool: zero amounts\\\");\\n        \\n        totalLiquidity = tokenAAmount; // Use tokenA amount as the initial liquidity value\\n        liquidity[msg.sender] = totalLiquidity;\\n        \\n        require(tokenA.transferFrom(msg.sender, address(this), tokenAAmount), \\\"SwapPool: tokenA transfer failed\\\");\\n        require(tokenB.transferFrom(msg.sender, address(this), tokenBAmount), \\\"SwapPool: tokenB transfer failed\\\");\\n        \\n        emit LiquidityProvided(msg.sender, totalLiquidity, tokenAAmount, tokenBAmount);\\n        \\n        return totalLiquidity;\\n    }\\n\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        require(xReserves > 0 && yReserves > 0, \\\"SwapPool: zero reserves\\\");\\n        \\n        uint256 xInputWithFee = xInput * 997;\\n        uint256 numerator = xInputWithFee * yReserves;\\n        uint256 denominator = (xReserves * 1000) + xInputWithFee;\\n        \\n        return numerator / denominator;\\n    }\\n\\n    function getLiquidity(address lp) public view returns (uint256) {\\n        return liquidity[lp];\\n    }\\n\\n    function tokenAToTokenB(uint256 tokenAInput) public returns (uint256 tokenBOutput) {\\n        require(tokenAInput > 0, \\\"SwapPool: zero tokenA amount\\\");\\n        \\n        uint256 tokenAReserve = tokenA.balanceOf(address(this));\\n        uint256 tokenBReserve = tokenB.balanceOf(address(this));\\n        \\n        tokenBOutput = price(tokenAInput, tokenAReserve, tokenBReserve);\\n        \\n        require(tokenA.transferFrom(msg.sender, address(this), tokenAInput), \\\"SwapPool: tokenA transfer failed\\\");\\n        require(tokenB.transfer(msg.sender, tokenBOutput), \\\"SwapPool: tokenB transfer failed\\\");\\n        \\n        emit TokenAToTokenBSwap(msg.sender, tokenBOutput, tokenAInput);\\n        \\n        return tokenBOutput;\\n    }\\n\\n    function tokenBToTokenA(uint256 tokenBInput) public returns (uint256 tokenAOutput) {\\n        require(tokenBInput > 0, \\\"SwapPool: zero tokenB amount\\\");\\n        \\n        uint256 tokenBReserve = tokenB.balanceOf(address(this));\\n        uint256 tokenAReserve = tokenA.balanceOf(address(this));\\n        \\n        tokenAOutput = price(tokenBInput, tokenBReserve, tokenAReserve);\\n        \\n        require(tokenB.transferFrom(msg.sender, address(this), tokenBInput), \\\"SwapPool: tokenB transfer failed\\\");\\n        require(tokenA.transfer(msg.sender, tokenAOutput), \\\"SwapPool: tokenA transfer failed\\\");\\n        \\n        emit TokenBToTokenASwap(msg.sender, tokenBInput, tokenAOutput);\\n        \\n        return tokenAOutput;\\n    }\\n\\n    function deposit(uint256 tokenAAmount, uint256 tokenBAmount) public returns (uint256 liquidityMinted) {\\n        require(tokenAAmount > 0 && tokenBAmount > 0, \\\"SwapPool: zero token amounts\\\");\\n        \\n        uint256 tokenAReserve = tokenA.balanceOf(address(this));\\n        uint256 tokenBReserve = tokenB.balanceOf(address(this));\\n        \\n        // Calculate what would be a balanced deposit based on current reserves\\n        uint256 tokenBOptimal = (tokenAAmount * tokenBReserve) / tokenAReserve;\\n        \\n        // Determine the actual deposit amounts\\n        uint256 tokenADeposit = tokenAAmount;\\n        uint256 tokenBDeposit;\\n        \\n        if (tokenBOptimal <= tokenBAmount) {\\n            // User provided enough or more tokenB than needed\\n            tokenBDeposit = tokenBOptimal;\\n        } else {\\n            // User provided less tokenB than optimal, recalculate tokenA deposit\\n            tokenBDeposit = tokenBAmount;\\n            tokenADeposit = (tokenBAmount * tokenAReserve) / tokenBReserve;\\n        }\\n        \\n        // Calculate liquidity to be minted\\n        liquidityMinted = (tokenADeposit * totalLiquidity) / tokenAReserve;\\n        \\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n        \\n        require(tokenA.transferFrom(msg.sender, address(this), tokenADeposit), \\\"SwapPool: tokenA transfer failed\\\");\\n        require(tokenB.transferFrom(msg.sender, address(this), tokenBDeposit), \\\"SwapPool: tokenB transfer failed\\\");\\n        \\n        emit LiquidityProvided(msg.sender, liquidityMinted, tokenADeposit, tokenBDeposit);\\n        \\n        return liquidityMinted;\\n    }\\n\\n    function withdraw(uint256 amount) public returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        require(amount > 0, \\\"SwapPool: zero liquidity amount\\\");\\n        require(liquidity[msg.sender] >= amount, \\\"SwapPool: insufficient liquidity\\\");\\n        \\n        uint256 tokenAReserve = tokenA.balanceOf(address(this));\\n        uint256 tokenBReserve = tokenB.balanceOf(address(this));\\n        \\n        tokenAAmount = (amount * tokenAReserve) / totalLiquidity;\\n        tokenBAmount = (amount * tokenBReserve) / totalLiquidity;\\n        \\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        \\n        require(tokenA.transfer(msg.sender, tokenAAmount), \\\"SwapPool: tokenA transfer failed\\\");\\n        require(tokenB.transfer(msg.sender, tokenBAmount), \\\"SwapPool: tokenB transfer failed\\\");\\n        \\n        emit LiquidityRemoved(msg.sender, amount, tokenAAmount, tokenBAmount);\\n        \\n        return (tokenAAmount, tokenBAmount);\\n    }\\n}\\n\\n// Interface to get token name if available\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n}\",\"keccak256\":\"0x8f92d50a28b5550079b82d915fd6ac5cf8a7d5a11e6b4e9c31ed06b8c6fc95a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001919380380620019198339810160408190526200003491620001ef565b600080546001600160a01b03199081166001600160a01b03858116918217845560018054841691861691821790556004805484168317815560058054909416909117909255604080516306fdde0360e01b8152905191936306fdde03938281019391928290030181865afa925050508015620000d457506040513d6000823e601f3d908101601f19168201604052620000d191908101906200023d565b60015b6200010d576040805180820190915260078152662ab735b737bbb760c91b6020820152600290620001069082620003a1565b506200011e565b60026200011b8282620003a1565b50505b806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156200018057506040513d6000823e601f3d908101601f191682016040526200017d91908101906200023d565b60015b620001b9576040805180820190915260078152662ab735b737bbb760c91b6020820152600390620001b29082620003a1565b50620001ca565b6003620001c78282620003a1565b50505b50506200046d565b80516001600160a01b0381168114620001ea57600080fd5b919050565b600080604083850312156200020357600080fd5b6200020e83620001d2565b91506200021e60208401620001d2565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200025157600080fd5b82516001600160401b03808211156200026957600080fd5b818501915085601f8301126200027e57600080fd5b81518181111562000293576200029362000227565b604051601f8201601f19908116603f01168101908382118183101715620002be57620002be62000227565b816040528281528886848701011115620002d757600080fd5b600093505b82841015620002fb5784840186015181850187015292850192620002dc565b600086848301015280965050505050505092915050565b600181811c908216806200032757607f821691505b6020821081036200034857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039c57600081815260208120601f850160051c81016020861015620003775750805b601f850160051c820191505b81811015620003985782815560010162000383565b5050505b505050565b81516001600160401b03811115620003bd57620003bd62000227565b620003d581620003ce845462000312565b846200034e565b602080601f8311600181146200040d5760008415620003f45750858301515b600019600386901b1c1916600185901b17855562000398565b600085815260208120601f198616915b828110156200043e578886015182559484019460019091019084016200041d565b50858210156200045d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61149c806200047d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a5843f0811610097578063d7150f2b11610066578063d7150f2b14610226578063dd2b782c14610239578063e2bbb15814610241578063f8b706371461025457600080fd5b8063a5843f08146101b5578063a747b93b146101c8578063ad20987b146101f1578063b8c876b11461020657600080fd5b80632e1a7d4d116100d35780632e1a7d4d1461015457806339cfb1621461017c5780635f64b55b1461018f5780637eb73012146101a257600080fd5b80630fc63d10146100fa57806315770f921461012a5780632071a9f414610141575b600080fd5b60005461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013360065481565b604051908152602001610121565b61013361014f3660046111e3565b610267565b61016761016236600461120f565b610317565b60408051928352602083019190915201610121565b61013361018a36600461120f565b610684565b60015461010d906001600160a01b031681565b60045461010d906001600160a01b031681565b6101336101c3366004611228565b61092f565b6101336101d636600461124a565b6001600160a01b031660009081526007602052604090205490565b6101f9610b5d565b604051610121919061127a565b61013361021436600461124a565b60076020526000908152604090205481565b61013361023436600461120f565b610beb565b6101f9610e8b565b61013361024f366004611228565b610e98565b60055461010d906001600160a01b031681565b600080831180156102785750600082115b6102c95760405162461bcd60e51b815260206004820152601760248201527f53776170506f6f6c3a207a65726f20726573657276657300000000000000000060448201526064015b60405180910390fd5b60006102d7856103e56112de565b905060006102e584836112de565b90506000826102f6876103e86112de565b61030091906112f5565b905061030c8183611308565b979650505050505050565b6000806000831161036a5760405162461bcd60e51b815260206004820152601f60248201527f53776170506f6f6c3a207a65726f206c697175696469747920616d6f756e740060448201526064016102c0565b336000908152600760205260409020548311156103c95760405162461bcd60e51b815260206004820181905260248201527f53776170506f6f6c3a20696e73756666696369656e74206c697175696469747960448201526064016102c0565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610436919061132a565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a8919061132a565b6006549091506104b883876112de565b6104c29190611308565b6006549094506104d282876112de565b6104dc9190611308565b33600090815260076020526040812080549295508792909190610500908490611343565b9250508190555084600660008282546105199190611343565b909155505060005460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611356565b6105af5760405162461bcd60e51b81526004016102c090611378565b60015460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611356565b6106405760405162461bcd60e51b81526004016102c0906113ad565b7f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d3386868660405161067594939291906113e2565b60405180910390a15050915091565b60008082116106d55760405162461bcd60e51b815260206004820152601c60248201527f53776170506f6f6c3a207a65726f20746f6b656e4120616d6f756e740000000060448201526064016102c0565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610742919061132a565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061132a565b90506107c1848383610267565b6000546040516323b872dd60e01b81529194506001600160a01b0316906323b872dd906107f690339030908990600401611408565b6020604051808303816000875af1158015610815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108399190611356565b6108555760405162461bcd60e51b81526004016102c090611378565b60015460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611356565b6108e65760405162461bcd60e51b81526004016102c0906113ad565b60408051338152602081018590529081018590527ff3886d767c9e7cae8717fb563b9044b5f255cc8d34c213c13733a86edb5fa24f906060015b60405180910390a15050919050565b60006006546000146109835760405162461bcd60e51b815260206004820152601d60248201527f53776170506f6f6c3a20616c726561647920696e697469616c697a656400000060448201526064016102c0565b6000831180156109935750600082115b6109d85760405162461bcd60e51b815260206004820152601660248201527553776170506f6f6c3a207a65726f20616d6f756e747360501b60448201526064016102c0565b600683905533600081815260076020526040808220869055905490516323b872dd60e01b81526001600160a01b03909116916323b872dd91610a21919030908890600401611408565b6020604051808303816000875af1158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190611356565b610a805760405162461bcd60e51b81526004016102c090611378565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610ab490339030908790600401611408565b6020604051808303816000875af1158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190611356565b610b135760405162461bcd60e51b81526004016102c0906113ad565b7f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500336006548585604051610b4a94939291906113e2565b60405180910390a1506006545b92915050565b60038054610b6a9061142c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061142c565b8015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b505050505081565b6000808211610c3c5760405162461bcd60e51b815260206004820152601c60248201527f53776170506f6f6c3a207a65726f20746f6b656e4220616d6f756e740000000060448201526064016102c0565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca9919061132a565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b919061132a565b9050610d28848383610267565b6001546040516323b872dd60e01b81529194506001600160a01b0316906323b872dd90610d5d90339030908990600401611408565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190611356565b610dbc5760405162461bcd60e51b81526004016102c0906113ad565b60005460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190611356565b610e4d5760405162461bcd60e51b81526004016102c090611378565b60408051338152602081018690529081018490527f371f9999907d1c85525cefcc7369cc438b3b7f5cf710239ee599389d7c8231b390606001610920565b60028054610b6a9061142c565b60008083118015610ea95750600082115b610ef55760405162461bcd60e51b815260206004820152601c60248201527f53776170506f6f6c3a207a65726f20746f6b656e20616d6f756e74730000000060448201526064016102c0565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f62919061132a565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd4919061132a565b9050600082610fe383886112de565b610fed9190611308565b905085600086831161100057508161101a565b50858361100d86836112de565b6110179190611308565b91505b846006548361102991906112de565b6110339190611308565b336000908152600760205260408120805492985088929091906110579084906112f5565b92505081905550856006600082825461107091906112f5565b90915550506000546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906110a990339030908790600401611408565b6020604051808303816000875af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190611356565b6111085760405162461bcd60e51b81526004016102c090611378565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061113c90339030908690600401611408565b6020604051808303816000875af115801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f9190611356565b61119b5760405162461bcd60e51b81526004016102c0906113ad565b7f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500338784846040516111d094939291906113e2565b60405180910390a1505050505092915050565b6000806000606084860312156111f857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561122157600080fd5b5035919050565b6000806040838503121561123b57600080fd5b50508035926020909101359150565b60006020828403121561125c57600080fd5b81356001600160a01b038116811461127357600080fd5b9392505050565b600060208083528351808285015260005b818110156112a75785810183015185820160400152820161128b565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610b5757610b576112c8565b80820180821115610b5757610b576112c8565b60008261132557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561133c57600080fd5b5051919050565b81810381811115610b5757610b576112c8565b60006020828403121561136857600080fd5b8151801515811461127357600080fd5b6020808252818101527f53776170506f6f6c3a20746f6b656e41207472616e73666572206661696c6564604082015260600190565b6020808252818101527f53776170506f6f6c3a20746f6b656e42207472616e73666572206661696c6564604082015260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181811c9082168061144057607f821691505b60208210810361146057634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122075bcd8cf726ed69cc2c64b16af6bd5cb561d0a22823fc28e59cbeb4f1bd99fc564736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1386,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenA",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 1389,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenB",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 1391,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenAName",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1393,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenBName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1395,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenAAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1397,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "tokenBAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1399,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1403,
        "contract": "contracts/TokenPairPool.sol:TokenPairPool",
        "label": "liquidity",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)729": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}